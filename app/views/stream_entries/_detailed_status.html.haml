.detailed-status.detailed-status--flex
  .p-author.h-card
    = link_to TagManager.instance.url_for(status.account), class: 'detailed-status__display-name u-url', target: stream_link_target, rel: 'noopener' do
      .detailed-status__display-avatar
        - if current_account&.user&.setting_auto_play_gif || autoplay
          = image_tag status.account.avatar_original_url, width: 48, height: 48, alt: '', class: 'account__avatar u-photo'
        - else
          = image_tag status.account.avatar_static_url, width: 48, height: 48, alt: '', class: 'account__avatar u-photo'
      %span.display-name
        %bdi
          %strong.display-name__html.p-name.emojify= display_name(status.account, custom_emojify: true, autoplay: autoplay)
        %span.display-name__account
          = acct(status.account)
          = fa_icon('lock') if status.account.locked?

  = account_action_button(status.account)

  .status__content.emojify<
    - if status.spoiler_text?
      %p{ :style => ('margin-bottom: 0' unless current_account&.user&.setting_expand_spoilers) }<
        %span.p-summary> #{Formatter.instance.format_spoiler(status, autoplay: autoplay)}&nbsp;
        %button.status__content__spoiler-link= t('statuses.show_more')
    .e-content{ lang: status.language, style: "display: #{!current_account&.user&.setting_expand_spoilers && status.spoiler_text? ? 'none' : 'block'}; direction: #{rtl_status?(status) ? 'rtl' : 'ltr'}" }
      = Formatter.instance.format(status, custom_emojify: true, autoplay: autoplay)
      - if status.preloadable_poll
        = react_component :poll, disabled: true, poll: ActiveModelSerializers::SerializableResource.new(status.preloadable_poll, serializer: REST::PollSerializer, scope: current_user, scope_name: :current_user).as_json do
          = render partial: 'stream_entries/poll', locals: { status: status, poll: status.preloadable_poll, autoplay: autoplay }

  - if !status.media_attachments.empty?
    - if status.media_attachments.first.audio_or_video?
      - video = status.media_attachments.first
      = react_component :video, src: video.file.url(:original), preview: video.file.url(:small), blurhash: video.blurhash, sensitive: !current_account&.user&.show_all_media? && status.sensitive? || current_account&.user&.hide_all_media?, width: 670, height: 380, detailed: true, inline: true, alt: video.description do
        = render partial: 'stream_entries/attachment_list', locals: { attachments: status.media_attachments }
    - else
      = react_component :media_gallery, height: 380, sensitive: !current_account&.user&.show_all_media? && status.sensitive? || current_account&.user&.hide_all_media?, standalone: true, 'autoPlayGif': current_account&.user&.setting_auto_play_gif || autoplay, 'reduceMotion': current_account&.user&.setting_reduce_motion, media: status.media_attachments.map { |a| ActiveModelSerializers::SerializableResource.new(a, serializer: REST::MediaAttachmentSerializer).as_json } do
        = render partial: 'stream_entries/attachment_list', locals: { attachments: status.media_attachments }
  - elsif status.preview_card
    = react_component :card, 'maxDescription': 160, card: ActiveModelSerializers::SerializableResource.new(status.preview_card, serializer: REST::PreviewCardSerializer).as_json

  .detailed-status__meta
    %data.dt-published{ value: status.created_at.to_time.iso8601 }

    = link_to TagManager.instance.url_for(status), class: 'detailed-status__datetime u-url u-uid', target: stream_link_target, rel: 'noopener' do
      %time.formatted{ datetime: status.created_at.iso8601, title: l(status.created_at) }= l(status.created_at)
    ·
    - if status.application && @account.user&.setting_show_application
      - if status.application.website.blank?
        %strong.detailed-status__application= status.application.name
      - else
        = link_to status.application.name, status.application.website, class: 'detailed-status__application', target: '_blank', rel: 'noopener'
      ·
    = link_to remote_interaction_path(status, type: :reply), class: 'modal-button detailed-status__link' do
      - if status.in_reply_to_id.nil?
        = fa_icon('reply')
      - else
        = fa_icon('reply-all')
      %span.detailed-status__reblogs>= number_to_human status.replies_count, strip_insignificant_zeros: true
      = " "
    ·
    - if status.direct_visibility?
      %span.detailed-status__link<
        = fa_icon('envelope')
    - elsif status.private_visibility? || status.limited_visibility?
      %span.detailed-status__link<
        = fa_icon('lock')
    - else
      = link_to remote_interaction_path(status, type: :reblog), class: 'modal-button detailed-status__link' do
        = fa_icon('retweet')
        %span.detailed-status__reblogs>= number_to_human status.reblogs_count, strip_insignificant_zeros: true
        = " "
    ·
    = link_to remote_interaction_path(status, type: :favourite), class: 'modal-button detailed-status__link' do
      = fa_icon('star')
      %span.detailed-status__favorites>= number_to_human status.favourites_count, strip_insignificant_zeros: true
      = " "

    - if user_signed_in?
      ·
      = link_to t('statuses.open_in_web'), web_url("statuses/#{status.id}"), class: 'detailed-status__application', target: '_blank'
